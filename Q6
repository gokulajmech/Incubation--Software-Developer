
import java.util.Scanner;

public class main {
    public static void main(String[] args)
    {
        Scanner myObj = new Scanner(System.in);

        System.out.println("Dimensions of the dungeon(Row x Column): ");
        int r= myObj.nextInt();
        int c= myObj.nextInt();

        char[][] arr = new char[r+1][c+1];
        for(int i=1;i<=r;i++)
        {
            for(int j=0;j<=c;j++)
            {
                if(j==0||i==0)
                    arr[i][j]='P';
                else
                    arr[i][j]='1';
            }
        }

        System.out.println("Position of adventurer: ");
        int Ai= myObj.nextInt();
        int Aj= myObj.nextInt();
        arr[Ai][Aj]='A';

        System.out.println("Position of Monster: ");
        int Mi = myObj.nextInt();
        int Mj = myObj.nextInt();
        arr[Mi][Mj]='M';

        System.out.println("Position of gold: ");
        int Gi= myObj.nextInt();
        int Gj= myObj.nextInt();
        arr[Gi][Gj]='G';

        System.out.println("Enter the number of pits :");
        int n=myObj.nextInt();

        for(int i=0;i<n;i++)
        {
            System.out.printf("Position of pit %d :",i+1);
            int Pi = myObj.nextInt();
            int Pj = myObj.nextInt();
            arr[Pi][Pj]='P';
        }
        int Mmove = Math.abs(Mi - Gi) + Math.abs(Mj - Gj);
        char out='1';
        int POSj=Aj,POSi=Ai,count=0;
        while(out!='G')
        {
            if (Aj > Gj) {
                for (int j = Aj; j >=Gj  && arr[Ai][j]!='P'; j--) {
                    System.out.print("(" + Ai + "," + j + ")->");
                    out=arr[Ai][j];
                    POSj=j;
                    count++;
                }
            }
            if (Aj < Gj) {
                for (int j = Aj+1; j <= Gj && arr[Ai][j]!='P'; j++) {
                    System.out.print("(" + Ai + "," + j + ")->");
                    out=arr[Ai][j];
                    POSj=j;
                    count++;
                }
            }
            if(Aj==Gj && out!='G')
            {
                if(Aj<c && arr[Ai][Aj+1]!='P')
                {
                    System.out.print("(" +Ai+","+(Aj+1)+ ")->");
                    out=arr[Ai][Aj+1];
                    POSj=Aj+1;
                    count++;
                }

                else if( arr[Ai][Aj-1]!='P')
                {
                    System.out.print("(" +Ai+","+(Aj-1)+ ")->");
                    out=arr[Ai][Aj-1];
                    POSj=Aj-1;
                    count++;
                }



            }
            Aj=POSj;
            if (Ai < Gi) {
                for (int i = Ai + 1; i <= Gi && arr[i][Aj]!='P'; i++) {
                    System.out.print("(" + i + "," + Aj + ")->");
                    out=arr[i][Aj];
                    POSi=i;
                    count++;
                }
            }

            if (Ai >Gi) {
                for (int i = Ai - 1; i >=Gi && arr[i][Aj]!='P'; i--) {
                    System.out.print("(" + i + "," + Aj + ")->");
                    out=arr[i][Aj];
                    POSi=i;
                    count++;
                }
            }
            if(Ai==Gi && out!='G')
            {
                if(Ai<r && arr[Ai+1][Aj]!='P')
                {
                    System.out.print("(" +(Ai+1)+","+(Aj)+ ")->");
                    out=arr[Ai+1][Aj];
                    POSi=Ai+1;
                    count++;
                }

                else if( arr[Ai-1][Aj]!='P')
                {
                    System.out.print("(" +(Ai+1)+","+(Aj)+ ")->");
                    out=arr[Ai-1][Aj];
                    POSi=Ai-1;
                    count++;
                }
            }
            Ai=POSi;
            if(count==0)
            {
                break;
            }

        }
        System.out.println("Output :");
        if (out=='G')
        {
            if(count<=Mmove)
                System.out.println("Minimum number of steps:" +count);
            else
                System.out.println("No possible solution");
        }
        else
        {
            System.out.println("No possible solution");
        }

    }
}
